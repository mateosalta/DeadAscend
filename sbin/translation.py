# -*- coding: utf-8 -*-
#!/usr/bin/env python

from __future__ import print_function
import os
import re
import sys
import json
import argparse
import fileinput

def translation_qml(file_path):

    j = json.load(open(file_path))
    layers = j['layers']

    qml_out = """import QtQuick 2.0

/*
 * Auto-generated by sbin/translation.py
 * Will export any scene editor descriptions to the game
 * See README.md for instructions
 */
QtObject {
    Component.onCompleted: {
"""

    for layer in layers:
        if layer['type'] == "objectgroup":
            objects = layer['objects']
            for obj in objects:
                if 'properties' in obj and 'description' in obj['properties']:
                    desc = obj['properties']['description']
                    pad = "        "
                    if desc[0] == '[':
                        desc = json.loads(desc)

                        for d in desc:
                            qml_out += pad+"qsTranslate(\"fromEditor\",\""+d+"\")"+"\n"

                        continue

                    qml_out += pad+"qsTranslate(\"fromEditor\",\""+desc+"\")"+"\n"


    qml_out += """
    }
}"""

    return qml_out

def main(arguments):

    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    #parser.add_argument('flag', help="flags (on, off)", type=str)
    parser.add_argument('scene_file', help="Scene (json) file") #, type=argparse.FileType('rw')
    #parser.add_argument('-i', '--infile', help="Input file",
    #                    default=sys.stdout, type=argparse.FileType('w'))

    args = parser.parse_args(arguments)


    qml = translation_qml(args.scene_file)

    with open("App/translations/Extra.qml", "w") as text_file:
        text_file.write(qml)
    #print(args.infile)
    #if args.flag == "on":
    #    comment(args.scene_file)
    #else:
    #    uncomment(args.infile)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
